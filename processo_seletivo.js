// Importa o pacote 'readline' para permitir entrada de dados pelo usu√°rio no terminal
const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});

// Fun√ß√£o utilit√°ria para criar pequenos atrasos (usada para simular anima√ß√µes)
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Fun√ß√£o para criar bordas de caixa para visuais aprimorados
function drawBox(content) {
    const line = '-'.repeat(content.length + 4);
    console.log(line);
    console.log(`| ${content} |`);
    console.log(line);
}

// Fun√ß√£o para imprimir l√¢mpadas com formata√ß√£o visual
function printLamps(lamps) {
    lamps.forEach((lamp, index) => {
        const symbol = lamp.status.includes("acesa") ? 'üí°' : 'üî¥'; // Usando emoji de l√¢mpada e luz apagada
        drawBox(`${symbol} ${lamp.name}: ${lamp.status}`);
    });
}

// 5) Resolver o problema dos interruptores e l√¢mpadas de forma visual e interativa
async function solveSwitchProblem() {
    /*
    Simulando o experimento para resolver o problema:

    1. Ligue o primeiro interruptor e deixe ligado por alguns minutos (simulado).
    2. Desligue o primeiro e ligue o segundo.
    3. V√° para a sala das l√¢mpadas e observe:
       - A l√¢mpada acesa ser√° controlada pelo segundo interruptor.
       - A l√¢mpada quente, mas apagada, ser√° controlada pelo primeiro interruptor.
       - A l√¢mpada fria e apagada ser√° controlada pelo terceiro interruptor.
    */

    // Estado inicial das l√¢mpadas
    let lamps = [
        { name: "L√¢mpada 1", status: "fria e apagada" },
        { name: "L√¢mpada 2", status: "fria e apagada" },
        { name: "L√¢mpada 3", status: "fria e apagada" }
    ];

    console.log("üì¢ Bem-vindo ao desafio dos interruptores e l√¢mpadas!");
    console.log("Voc√™ est√° em uma sala com 3 interruptores e precisa descobrir qual l√¢mpada cada interruptor controla.");

    // Passo 1: Ligar o primeiro interruptor
    await sleep(1000);
    console.log("\nüëâ Ligando o primeiro interruptor e esperando alguns minutos...");
    await sleep(2000);

    // Simula deixar o primeiro interruptor ligado (L√¢mpada 1 fica quente)
    lamps[0].status = "quente e apagada";
    printLamps(lamps);

    // Passo 2: Desligar o primeiro interruptor e ligar o segundo
    await sleep(2000);
    console.log("\nüëâ Desligando o primeiro interruptor e ligando o segundo...");
    await sleep(2000);

    // Simula o segundo interruptor ligado (L√¢mpada 2 acende)
    lamps[1].status = "acesa";
    printLamps(lamps);

    // Resultado final: mostrar as l√¢mpadas e seu status
    await sleep(2000);
    console.log("\nüí° Voc√™ entrou na sala das l√¢mpadas e observou o seguinte:");
    printLamps(lamps);

    // Conclus√£o: baseado nas observa√ß√µes, identificamos o controle de cada l√¢mpada
    await sleep(2000);
    console.log("\nüß† Conclus√£o:");
    console.log("- O primeiro interruptor controla a L√¢mpada 1 (quente e apagada).");
    console.log("- O segundo interruptor controla a L√¢mpada 2 (acesa).");
    console.log("- O terceiro interruptor controla a L√¢mpada 3 (fria e apagada).");

    menu();
}

// 1) Verificar se um n√∫mero pertence √† sequ√™ncia de Fibonacci
function isFibonacci(num) {
    let a = 0, b = 1, next = a + b;
    if (num === a || num === b) return true;
    while (next <= num) {
        if (next === num) return true;
        a = b;
        b = next;
        next = a + b;
    }
    return false;
}

function fibonacciCheck() {
    readline.question('Digite um n√∫mero para verificar se pertence √† sequ√™ncia de Fibonacci: ', (input) => {
        const num = parseInt(input);
        if (isNaN(num)) {
            console.log("Por favor, insira um n√∫mero v√°lido.");
        } else {
            const result = isFibonacci(num) ? "pertence" : "n√£o pertence";
            console.log(`O n√∫mero ${num} ${result} √† sequ√™ncia de Fibonacci.`);
        }
        menu();
    });
}

// 2) Contar a ocorr√™ncia da letra 'a' ou 'A' em uma string
function countLetterA(str) {
    return (str.match(/a/gi) || []).length;
}

function countAInString() {
    readline.question('Digite uma string para contar as ocorr√™ncias da letra "a" (mai√∫scula ou min√∫scula): ', (input) => {
        const count = countLetterA(input);
        console.log(`A letra "a" aparece ${count} vezes na string fornecida.`);
        menu();
    });
}

// 3) Qual ser√° o valor final da vari√°vel SOMA?
function calculateSoma() {
    let INDICE = 12, SOMA = 0, K = 1;
    while (K < INDICE) {
        K++;
        SOMA += K;
    }
    return SOMA;
}

function showSoma() {
    console.log(`O valor final da vari√°vel SOMA √© ${calculateSoma()}.`);
    menu();
}

// 4) Completar as sequ√™ncias num√©ricas
function completeSequences() {
    let a = [1, 3, 5, 7, 9]; // Sequ√™ncia de n√∫meros √≠mpares
    let b = [2, 4, 8, 16, 32, 64, 128]; // Sequ√™ncia de pot√™ncias de 2
    let c = [0, 1, 4, 9, 16, 25, 36, 49]; // Sequ√™ncia de quadrados perfeitos
    let d = [4, 16, 36, 64, 100]; // Sequ√™ncia de quadrados de n√∫meros pares
    let e = [1, 1, 2, 3, 5, 8, 13]; // Sequ√™ncia de Fibonacci
    let f = [2, 10, 12, 16, 17, 18, 19, 200]; // Sequ√™ncia l√≥gica

    console.log("Sequ√™ncias completadas:");
    console.log(`a) ${a}`);
    console.log(`b) ${b}`);
    console.log(`c) ${c}`);
    console.log(`d) ${d}`);
    console.log(`e) ${e}`);
    console.log(`f) ${f}`);
    menu();
}

// Fun√ß√£o para exibir o menu e coletar a escolha do usu√°rio
function menu() {
    console.log("\nEscolha uma das op√ß√µes abaixo:");
    console.log("1. Verificar n√∫mero na sequ√™ncia de Fibonacci");
    console.log("2. Contar ocorr√™ncias da letra 'a' em uma string");
    console.log("3. Mostrar o valor final da vari√°vel SOMA");
    console.log("4. Completar sequ√™ncias num√©ricas");
    console.log("5. Resolver o problema dos interruptores");
    console.log("6. Sair");

    readline.question('Digite o n√∫mero da sua escolha: ', (choice) => {
        switch (choice) {
            case '1':
                fibonacciCheck();
                break;
            case '2':
                countAInString();
                break;
            case '3':
                showSoma();
                break;
            case '4':
                completeSequences();
                break;
            case '5':
                solveSwitchProblem();
                break;
            case '6':
                console.log("Encerrando o programa. At√© logo!");
                readline.close();
                break;
            default:
                console.log("Escolha inv√°lida. Tente novamente.");
                menu();
                break;
        }
    });
}

// Iniciar o programa exibindo o menu
menu();
